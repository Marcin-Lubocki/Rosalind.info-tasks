
"""
Computing GC Content

From Rosalind.info:

Problem
The GC-content of a DNA string is given by the percentage of symbols in the string that are 'C' or 'G'. For example, the GC-content of "AGCTATAG" is 37.5%. Note that the reverse complement of any DNA string has the same GC-content.

DNA strings must be labeled when they are consolidated into a database. A commonly used method of string labeling is called FASTA format. In this format, the string is introduced by a line that begins with '>', followed by some labeling information. Subsequent lines contain the string itself; the first line to begin with '>' indicates the label of the next string.

In Rosalind's implementation, a string in FASTA format will be labeled by the ID "Rosalind_xxxx", where "xxxx" denotes a four-digit code between 0000 and 9999.

Given: At most 10 DNA strings in FASTA format (of length at most 1 kbp each).

Return: The ID of the string having the highest GC-content, followed by the GC-content of that string. Rosalind allows for a default error of 0.001 in all decimal answers unless otherwise stated; please see the note on absolute error below.

Sample Dataset
>Rosalind_6404
CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC
TCCCACTAATAATTCTGAGG
>Rosalind_5959
CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCT
ATATCCATTTGTCAGCAGACACGC
>Rosalind_0808
CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC
TGGGAACCTGCGGGCAGTAGGTGGAAT
Sample Output
Rosalind_0808
60.919540
"""

from Bio import SeqIO # to read FASTA records


# the gc_content function takes DNA sequence as an argument and returns its GC content
def gc_content(seq):
  r = 6 # decimal places to be rounded
  gc_content = round((seq.count("G") + seq.count("C"))*100/len(seq), r)
  return(gc_content)


# dict_gc_content storages all sequences ID's with its GC content
dict_gc_content = {}

# reading FASTA file and storaging sequences ID's with its GC content calculated by gc_content function in dict_gc_content
for record in SeqIO.parse("input.fasta", "fasta"):
  dict_gc_content[record.id] = gc_content(record.seq)

# printing ID of the sequence with the highest GC content from dict_gc_content
print(max(dict_gc_content, key=dict_gc_content.get), max(dict_gc_content.values()))
